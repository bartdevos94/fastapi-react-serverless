name: Deploy FastAPI Backend

on:
  push:
    branches:
      - main        # Production deployment
      - develop     # Development deployment
    paths:
      - 'fastapi-aws-backend/**'
      - '.github/workflows/deploy.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'fastapi-aws-backend/**'
  workflow_dispatch:  # Manual trigger
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  AWS_REGION: us-east-1
  PYTHON_VERSION: '3.11'

jobs:
  # Job 1: Test and Lint
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./fastapi-aws-backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Lint with flake8
        run: |
          # Stop build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Treat all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Format check with Black
        run: |
          black --check --diff .

      - name: Type check with mypy
        run: |
          mypy app/ --ignore-missing-imports

      - name: Security check with bandit
        run: |
          bandit -r app/ -f json -o bandit-report.json || true

      - name: Run tests with pytest
        run: |
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
        env:
          # Test environment variables
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
          COGNITO_USER_POOL_ID: test-pool-id
          COGNITO_CLIENT_ID: test-client-id
          DYNAMODB_TABLE_NAME: test-table
          ENVIRONMENT: test

      - name: Upload coverage to Codecov
        if: github.event_name == 'push'
        uses: codecov/codecov-action@v3
        with:
          file: ./fastapi-aws-backend/coverage.xml
          flags: backend
          name: backend-coverage

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            ./fastapi-aws-backend/htmlcov/
            ./fastapi-aws-backend/bandit-report.json

  # Job 2: Build and Package
  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    defaults:
      run:
        working-directory: ./fastapi-aws-backend
    
    outputs:
      artifact-name: ${{ steps.package.outputs.artifact-name }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create deployment package
        id: package
        run: |
          # Create deployment directory
          mkdir -p deployment-package
          
          # Copy application code
          cp -r app/ deployment-package/
          cp requirements.txt deployment-package/
          
          # Install dependencies into package
          pip install -r requirements.txt -t deployment-package/
          
          # Remove unnecessary files to reduce package size
          find deployment-package/ -type d -name "__pycache__" -exec rm -rf {} + || true
          find deployment-package/ -type f -name "*.pyc" -delete || true
          find deployment-package/ -type f -name "*.pyo" -delete || true
          
          # Create ZIP file
          cd deployment-package
          zip -r ../backend-deployment.zip . -x "*.git*" "*.DS_Store*" "*__pycache__*"
          cd ..
          
          # Set output
          echo "artifact-name=backend-deployment.zip" >> $GITHUB_OUTPUT

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v3
        with:
          name: backend-deployment-${{ github.sha }}
          path: ./fastapi-aws-backend/backend-deployment.zip
          retention-days: 30

  # Job 3: Deploy to Development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [test, build]
    if: |
      (github.ref == 'refs/heads/develop' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download deployment artifact
        uses: actions/download-artifact@v3
        with:
          name: backend-deployment-${{ github.sha }}
          path: ./

      - name: Deploy to Lambda
        run: |
          # Update Lambda function code
          aws lambda update-function-code \
            --function-name "${{ vars.LAMBDA_FUNCTION_NAME_DEV }}" \
            --zip-file fileb://backend-deployment.zip \
            --region ${{ env.AWS_REGION }}
          
          # Wait for update to complete
          aws lambda wait function-updated \
            --function-name "${{ vars.LAMBDA_FUNCTION_NAME_DEV }}" \
            --region ${{ env.AWS_REGION }}

      - name: Update Lambda environment variables
        run: |
          aws lambda update-function-configuration \
            --function-name "${{ vars.LAMBDA_FUNCTION_NAME_DEV }}" \
            --environment Variables="{
              AWS_REGION=${{ env.AWS_REGION }},
              COGNITO_USER_POOL_ID=${{ secrets.COGNITO_USER_POOL_ID_DEV }},
              COGNITO_CLIENT_ID=${{ secrets.COGNITO_CLIENT_ID_DEV }},
              DYNAMODB_TABLE_NAME=${{ vars.DYNAMODB_TABLE_NAME_DEV }},
              ENVIRONMENT=dev,
              CORS_ORIGINS=${{ vars.CORS_ORIGINS_DEV }},
              LOG_LEVEL=DEBUG
            }" \
            --region ${{ env.AWS_REGION }}

      - name: Test deployment
        run: |
          # Wait a moment for deployment to be ready
          sleep 10
          
          # Test health endpoint
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
            "${{ vars.API_GATEWAY_URL_DEV }}/health")
          
          if [ "$RESPONSE" -eq 200 ]; then
            echo "‚úÖ Health check passed"
          else
            echo "‚ùå Health check failed with status: $RESPONSE"
            exit 1
          fi

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "üöÄ Development deployment successful!"
            echo "API URL: ${{ vars.API_GATEWAY_URL_DEV }}"
            echo "Documentation: ${{ vars.API_GATEWAY_URL_DEV }}/docs"
          else
            echo "‚ùå Development deployment failed!"
          fi

  # Job 4: Deploy to Production
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build]
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod')
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download deployment artifact
        uses: actions/download-artifact@v3
        with:
          name: backend-deployment-${{ github.sha }}
          path: ./

      - name: Deploy to Lambda
        run: |
          # Update Lambda function code
          aws lambda update-function-code \
            --function-name "${{ vars.LAMBDA_FUNCTION_NAME_PROD }}" \
            --zip-file fileb://backend-deployment.zip \
            --region ${{ env.AWS_REGION }}
          
          # Wait for update to complete
          aws lambda wait function-updated \
            --function-name "${{ vars.LAMBDA_FUNCTION_NAME_PROD }}" \
            --region ${{ env.AWS_REGION }}

      - name: Update Lambda environment variables
        run: |
          aws lambda update-function-configuration \
            --function-name "${{ vars.LAMBDA_FUNCTION_NAME_PROD }}" \
            --environment Variables="{
              AWS_REGION=${{ env.AWS_REGION }},
              COGNITO_USER_POOL_ID=${{ secrets.COGNITO_USER_POOL_ID_PROD }},
              COGNITO_CLIENT_ID=${{ secrets.COGNITO_CLIENT_ID_PROD }},
              DYNAMODB_TABLE_NAME=${{ vars.DYNAMODB_TABLE_NAME_PROD }},
              ENVIRONMENT=prod,
              CORS_ORIGINS=${{ vars.CORS_ORIGINS_PROD }},
              LOG_LEVEL=WARNING
            }" \
            --region ${{ env.AWS_REGION }}

      - name: Test deployment
        run: |
          # Wait a moment for deployment to be ready
          sleep 10
          
          # Test health endpoint
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
            "${{ vars.API_GATEWAY_URL_PROD }}/health")
          
          if [ "$RESPONSE" -eq 200 ]; then
            echo "‚úÖ Health check passed"
          else
            echo "‚ùå Health check failed with status: $RESPONSE"
            exit 1
          fi

      - name: Create GitHub Release
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: backend-v${{ github.run_number }}
          release_name: Backend Release v${{ github.run_number }}
          body: |
            ## Backend Release v${{ github.run_number }}
            
            **Deployed to Production** üöÄ
            
            ### Changes
            - ${{ github.event.head_commit.message }}
            
            ### Deployment Details
            - **Environment**: Production
            - **Commit**: ${{ github.sha }}
            - **API URL**: ${{ vars.API_GATEWAY_URL_PROD }}
            - **Documentation**: ${{ vars.API_GATEWAY_URL_PROD }}/docs
            
          draft: false
          prerelease: false

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "üöÄ Production deployment successful!"
            echo "API URL: ${{ vars.API_GATEWAY_URL_PROD }}"
            echo "Documentation: ${{ vars.API_GATEWAY_URL_PROD }}/docs"
          else
            echo "‚ùå Production deployment failed!"
          fi

  # Job 5: Integration Tests (optional)
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [deploy-dev]
    if: |
      (github.ref == 'refs/heads/develop' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pytest

      - name: Run integration tests
        run: |
          # Basic API integration tests
          python -c "
          import requests
          import sys
          
          base_url = '${{ vars.API_GATEWAY_URL_DEV }}'
          
          # Test health endpoint
          response = requests.get(f'{base_url}/health')
          assert response.status_code == 200, f'Health check failed: {response.status_code}'
          print('‚úÖ Health check passed')
          
          # Test API documentation
          response = requests.get(f'{base_url}/docs')
          assert response.status_code == 200, f'Docs check failed: {response.status_code}'
          print('‚úÖ Documentation accessible')
          
          print('üéâ All integration tests passed!')
          "

# Required GitHub Repository Settings:
# =====================================
# 
# Repository Secrets (Settings > Secrets and variables > Actions):
# - AWS_ACCESS_KEY_ID: Your AWS access key
# - AWS_SECRET_ACCESS_KEY: Your AWS secret key
# - COGNITO_USER_POOL_ID_DEV: Development Cognito User Pool ID
# - COGNITO_CLIENT_ID_DEV: Development Cognito Client ID
# - COGNITO_USER_POOL_ID_PROD: Production Cognito User Pool ID
# - COGNITO_CLIENT_ID_PROD: Production Cognito Client ID
# 
# Repository Variables (Settings > Secrets and variables > Actions):
# - LAMBDA_FUNCTION_NAME_DEV: my-app-backend-dev
# - LAMBDA_FUNCTION_NAME_PROD: my-app-backend-prod
# - DYNAMODB_TABLE_NAME_DEV: my-app-users-dev
# - DYNAMODB_TABLE_NAME_PROD: my-app-users-prod
# - API_GATEWAY_URL_DEV: https://xxx.execute-api.us-east-1.amazonaws.com/dev
# - API_GATEWAY_URL_PROD: https://xxx.execute-api.us-east-1.amazonaws.com/prod
# - CORS_ORIGINS_DEV: https://xxx.cloudfront.net,http://localhost:3000
# - CORS_ORIGINS_PROD: https://xxx.cloudfront.net
# 
# Environment Protection Rules (Settings > Environments):
# - development: Auto-deploy from develop branch
# - production: Require manual approval for main branch
# 
# Branch Protection Rules (Settings > Branches):
# - main: Require PR reviews, require status checks
# - develop: Require status checks
#
# How to set up:
# 1. Deploy your infrastructure manually via AWS Console first
# 2. Add all the required secrets and variables to GitHub
# 3. Create the environment protection rules
# 4. Push code to develop/main branches to trigger deployments